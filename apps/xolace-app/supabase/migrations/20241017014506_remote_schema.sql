drop trigger if exists "tr_posts_autoset_author_name" on "public"."posts";

alter table "public"."likes" drop constraint "likes_post_id_fkey";

alter table "public"."likes" drop constraint "likes_user_id_fkey";

alter table "public"."posts" drop constraint "posts_created_by_fkey";

drop function if exists "public"."set_post_author_name_and_author_avatar"();

create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "post" uuid not null,
    "created_by" uuid not null,
    "comment_text" text not null,
    "author_avatar_url" text,
    "author_name" text
);


alter table "public"."comments" enable row level security;

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."comments" add constraint "comments_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."comments" validate constraint "comments_created_by_fkey";

alter table "public"."comments" add constraint "comments_post_fkey1" FOREIGN KEY (post) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_post_fkey1";

alter table "public"."likes" add constraint "likes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."likes" validate constraint "likes_post_id_fkey";

alter table "public"."likes" add constraint "likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."likes" validate constraint "likes_user_id_fkey";

alter table "public"."posts" add constraint "posts_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."posts" validate constraint "posts_created_by_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.set_author_name_and_author_avatar()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.author_name = (SELECT username FROM profiles WHERE supabase_user = auth.uid());
  NEW.author_avatar_url = (SELECT avatar_url FROM profiles WHERE supabase_user = auth.uid());
  RETURN NEW;
END;$function$
;

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

create policy "Allow all auth users to add "
on "public"."comments"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to view their own data only"
on "public"."comments"
as permissive
for select
to authenticated
using (true);


create policy "allow to delete comment if has created"
on "public"."comments"
as permissive
for delete
to authenticated
using (rls_helpers.is_same_user(created_by));


create policy "allow to update user created it"
on "public"."comments"
as permissive
for update
to authenticated
using (rls_helpers.is_same_user(created_by))
with check (rls_helpers.is_same_user(created_by));


create policy "allow delete for user who created post"
on "public"."posts"
as permissive
for delete
to authenticated
using (rls_helpers.is_same_user(created_by));


create policy "Enable read access for all users"
on "public"."profiles"
as permissive
for select
to public
using (true);


CREATE TRIGGER tr_comments_autoset_author_name BEFORE INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION set_author_name_and_author_avatar();

CREATE TRIGGER tr_comments_autoset_created_by BEFORE INSERT ON public.comments FOR EACH ROW EXECUTE FUNCTION set_created_by_value();

CREATE TRIGGER tr_posts_autoset_author_name BEFORE INSERT ON public.posts FOR EACH ROW EXECUTE FUNCTION set_author_name_and_author_avatar();


