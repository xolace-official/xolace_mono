create type "public"."vote_types" as enum ('upvote', 'downvote');

drop trigger if exists "tr_likes_autoset_user_id" on "public"."likes";

alter table "public"."views" drop constraint "views_post_id_fkey";

drop function if exists "public"."set_user_id_value_for_like_row"();

create table "public"."votes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "post_id" uuid not null,
    "vote_type" vote_types not null default 'upvote'::vote_types
);


alter table "public"."votes" enable row level security;

alter table "public"."profiles" alter column "supabase_user" set not null;

alter table "public"."views" alter column "post_id" set not null;

CREATE UNIQUE INDEX votes_pkey ON public.votes USING btree (id);

alter table "public"."votes" add constraint "votes_pkey" PRIMARY KEY using index "votes_pkey";

alter table "public"."votes" add constraint "votes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."votes" validate constraint "votes_post_id_fkey";

alter table "public"."votes" add constraint "votes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."votes" validate constraint "votes_user_id_fkey";

alter table "public"."views" add constraint "views_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."views" validate constraint "views_post_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_vote(p_post_id uuid, p_user_id uuid, p_vote_type vote_types, p_current_vote text)
 RETURNS json
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
declare
  v_result json;
begin
  -- Start transaction
  begin
    -- Remove existing vote if exists
    if p_current_vote is not null then
      -- Delete the existing vote
      delete from votes
      where post_id = p_post_id
      and user_id = p_user_id;
      
      -- Update post vote counts (decrement previous vote)
      if p_current_vote::vote_types = 'upvote' then
        update posts
        set upvotes = upvotes - 1
        where id = p_post_id;
      elsif p_current_vote::vote_types = 'downvote' then
        update posts
        set downvotes = downvotes - 1
        where id = p_post_id;
      end if;
    end if;

    -- If the new vote is different from the current vote
    if p_current_vote is null or p_current_vote::vote_types != p_vote_type then
      -- Insert new vote (user_id already handled by another function)
      insert into votes (post_id, vote_type)
      values (p_post_id, p_vote_type);
      
      -- Update post vote counts (increment new vote)
      if p_vote_type = 'upvote' then
        update posts
        set upvotes = upvotes + 1
        where id = p_post_id;
      elsif p_vote_type = 'downvote' then
        update posts
        set downvotes = downvotes + 1
        where id = p_post_id;
      end if;
    end if;

    -- Get updated post data
    select json_build_object(
      'success', true,
      'post', row_to_json(p)
    ) into v_result
    from posts p
    where id = p_post_id;
    
    return v_result;
  exception
    when others then
      -- Roll back transaction on error
      raise exception 'Transaction failed: %', SQLERRM;
  end;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.set_user_id_value_for_row()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.user_id = ( SELECT id FROM profiles WHERE supabase_user = auth.uid());
  RETURN NEW;
END;$function$
;

grant delete on table "public"."votes" to "anon";

grant insert on table "public"."votes" to "anon";

grant references on table "public"."votes" to "anon";

grant select on table "public"."votes" to "anon";

grant trigger on table "public"."votes" to "anon";

grant truncate on table "public"."votes" to "anon";

grant update on table "public"."votes" to "anon";

grant delete on table "public"."votes" to "authenticated";

grant insert on table "public"."votes" to "authenticated";

grant references on table "public"."votes" to "authenticated";

grant select on table "public"."votes" to "authenticated";

grant trigger on table "public"."votes" to "authenticated";

grant truncate on table "public"."votes" to "authenticated";

grant update on table "public"."votes" to "authenticated";

grant delete on table "public"."votes" to "service_role";

grant insert on table "public"."votes" to "service_role";

grant references on table "public"."votes" to "service_role";

grant select on table "public"."votes" to "service_role";

grant trigger on table "public"."votes" to "service_role";

grant truncate on table "public"."votes" to "service_role";

grant update on table "public"."votes" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."votes"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all auth users"
on "public"."votes"
as permissive
for select
to authenticated
using (true);


CREATE TRIGGER tr_votes_autoset_user_id BEFORE INSERT ON public.votes FOR EACH ROW EXECUTE FUNCTION set_user_id_value_for_row();

CREATE TRIGGER tr_likes_autoset_user_id BEFORE INSERT ON public.likes FOR EACH ROW EXECUTE FUNCTION set_user_id_value_for_row();



