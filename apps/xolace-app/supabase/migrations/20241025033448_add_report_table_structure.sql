create type "public"."report_status" as enum ('pending', 'reviewed', 'resolved');

create sequence "public"."reports_id_seq";

create table "public"."reports" (
    "id" bigint generated by default as identity not null,
    "reported_by" uuid,
    "post_id" uuid,
    "comment_id" bigint,
    "reason" text not null,
    "created_at" timestamp without time zone default now(),
    "updated_at" timestamp without time zone default now(),
    "status" report_status not null default 'pending'::report_status
);


alter sequence "public"."reports_id_seq" owned by "public"."reports"."id";

CREATE UNIQUE INDEX reports_id_key ON public.reports USING btree (id);

CREATE UNIQUE INDEX reports_pkey ON public.reports USING btree (id);

CREATE UNIQUE INDEX reports_reported_by_comment_id_key ON public.reports USING btree (reported_by, comment_id);

CREATE UNIQUE INDEX reports_reported_by_post_id_key ON public.reports USING btree (reported_by, post_id);

alter table "public"."reports" add constraint "reports_pkey" PRIMARY KEY using index "reports_pkey";

alter table "public"."reports" add constraint "reports_comment_id_fkey" FOREIGN KEY (comment_id) REFERENCES comments(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reports" validate constraint "reports_comment_id_fkey";

alter table "public"."reports" add constraint "reports_id_key" UNIQUE using index "reports_id_key";

alter table "public"."reports" add constraint "reports_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reports" validate constraint "reports_post_id_fkey";

alter table "public"."reports" add constraint "reports_reported_by_comment_id_key" UNIQUE using index "reports_reported_by_comment_id_key";

alter table "public"."reports" add constraint "reports_reported_by_fkey" FOREIGN KEY (reported_by) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reports" validate constraint "reports_reported_by_fkey";

alter table "public"."reports" add constraint "reports_reported_by_post_id_key" UNIQUE using index "reports_reported_by_post_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.set_reported_by_value()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.reported_by = ( SELECT id FROM profiles WHERE supabase_user = auth.uid());
  RETURN NEW;
END;$function$
;

grant delete on table "public"."reports" to "anon";

grant insert on table "public"."reports" to "anon";

grant references on table "public"."reports" to "anon";

grant select on table "public"."reports" to "anon";

grant trigger on table "public"."reports" to "anon";

grant truncate on table "public"."reports" to "anon";

grant update on table "public"."reports" to "anon";

grant delete on table "public"."reports" to "authenticated";

grant insert on table "public"."reports" to "authenticated";

grant references on table "public"."reports" to "authenticated";

grant select on table "public"."reports" to "authenticated";

grant trigger on table "public"."reports" to "authenticated";

grant truncate on table "public"."reports" to "authenticated";

grant update on table "public"."reports" to "authenticated";

grant delete on table "public"."reports" to "service_role";

grant insert on table "public"."reports" to "service_role";

grant references on table "public"."reports" to "service_role";

grant select on table "public"."reports" to "service_role";

grant trigger on table "public"."reports" to "service_role";

grant truncate on table "public"."reports" to "service_role";

grant update on table "public"."reports" to "service_role";

CREATE TRIGGER tr_reports_autoset_reported_by BEFORE INSERT ON public.reports FOR EACH ROW EXECUTE FUNCTION set_reported_by_value();


