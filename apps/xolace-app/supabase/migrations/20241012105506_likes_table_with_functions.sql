create sequence "public"."likes_id_seq";

create table "public"."likes" (
    "id" bigint generated by default as identity not null,
    "post_id" uuid,
    "user_id" uuid,
    "created_at" timestamp without time zone default now()
);


alter sequence "public"."likes_id_seq" owned by "public"."likes"."id";

CREATE UNIQUE INDEX likes_pkey ON public.likes USING btree (id);

CREATE UNIQUE INDEX likes_post_id_user_id_key ON public.likes USING btree (post_id, user_id);

alter table "public"."likes" add constraint "likes_pkey" PRIMARY KEY using index "likes_pkey";

alter table "public"."likes" add constraint "likes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) not valid;

alter table "public"."likes" validate constraint "likes_post_id_fkey";

alter table "public"."likes" add constraint "likes_post_id_user_id_key" UNIQUE using index "likes_post_id_user_id_key";

alter table "public"."likes" add constraint "likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."likes" validate constraint "likes_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.set_user_id_value_for_like_row()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  NEW.user_id = ( SELECT id FROM profiles WHERE supabase_user = auth.uid());
  RETURN NEW;
END;$function$
;

grant delete on table "public"."likes" to "anon";

grant insert on table "public"."likes" to "anon";

grant references on table "public"."likes" to "anon";

grant select on table "public"."likes" to "anon";

grant trigger on table "public"."likes" to "anon";

grant truncate on table "public"."likes" to "anon";

grant update on table "public"."likes" to "anon";

grant delete on table "public"."likes" to "authenticated";

grant insert on table "public"."likes" to "authenticated";

grant references on table "public"."likes" to "authenticated";

grant select on table "public"."likes" to "authenticated";

grant trigger on table "public"."likes" to "authenticated";

grant truncate on table "public"."likes" to "authenticated";

grant update on table "public"."likes" to "authenticated";

grant delete on table "public"."likes" to "service_role";

grant insert on table "public"."likes" to "service_role";

grant references on table "public"."likes" to "service_role";

grant select on table "public"."likes" to "service_role";

grant trigger on table "public"."likes" to "service_role";

grant truncate on table "public"."likes" to "service_role";

grant update on table "public"."likes" to "service_role";

CREATE TRIGGER tr_likes_autoset_user_id BEFORE INSERT ON public.likes FOR EACH ROW EXECUTE FUNCTION set_user_id_value_for_like_row();


