create type "public"."campfire_purpose" as enum ('support_circle', 'growth_group', 'creative_outlet', 'general_discussion');

create type "public"."campfire_role" as enum ('camper', 'firekeeper', 'firestarter');

create type "public"."campfire_visibility" as enum ('public', 'restricted', 'private', 'secret');

create table "public"."campfire_members" (
    "id" uuid not null default gen_random_uuid(),
    "campfire_id" uuid not null,
    "user_id" uuid not null,
    "role" campfire_role not null default 'camper'::campfire_role,
    "joined_at" timestamp with time zone not null default now()
);


alter table "public"."campfire_members" enable row level security;

create table "public"."campfire_rules" (
    "id" bigint generated by default as identity not null,
    "campfire_id" uuid not null,
    "title" text not null,
    "description" text,
    "display_order" smallint not null default 0,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."campfire_rules" enable row level security;

create table "public"."campfires" (
    "id" uuid not null default gen_random_uuid(),
    "created_by" uuid not null,
    "name" text not null,
    "slug" text not null,
    "description" text,
    "icon_url" text,
    "banner_url" text,
    "purpose" campfire_purpose not null default 'general_discussion'::campfire_purpose,
    "visibility" campfire_visibility not null default 'public'::campfire_visibility,
    "member_count" integer not null default 0,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."campfires" enable row level security;

alter table "public"."posts" add column "campfire_id" uuid;

CREATE UNIQUE INDEX campfire_members_id_key ON public.campfire_members USING btree (id);

CREATE UNIQUE INDEX campfire_members_pkey ON public.campfire_members USING btree (campfire_id, user_id);

CREATE UNIQUE INDEX campfire_rules_pkey ON public.campfire_rules USING btree (id);

CREATE UNIQUE INDEX campfires_pkey ON public.campfires USING btree (id);

CREATE UNIQUE INDEX campfires_slug_key ON public.campfires USING btree (slug);

CREATE INDEX idx_campfire_members_campfire_id ON public.campfire_members USING btree (campfire_id);

CREATE INDEX idx_campfire_members_user_id ON public.campfire_members USING btree (user_id);

CREATE INDEX idx_campfire_rules_campfire_id ON public.campfire_rules USING btree (campfire_id);

CREATE INDEX idx_campfires_created_by ON public.campfires USING btree (created_by);

CREATE INDEX idx_campfires_purpose ON public.campfires USING btree (purpose);

CREATE INDEX idx_campfires_slug ON public.campfires USING btree (slug);

CREATE INDEX idx_posts_campfire_id ON public.posts USING btree (campfire_id) WHERE (campfire_id IS NOT NULL);

alter table "public"."campfire_members" add constraint "campfire_members_pkey" PRIMARY KEY using index "campfire_members_pkey";

alter table "public"."campfire_rules" add constraint "campfire_rules_pkey" PRIMARY KEY using index "campfire_rules_pkey";

alter table "public"."campfires" add constraint "campfires_pkey" PRIMARY KEY using index "campfires_pkey";

alter table "public"."campfire_members" add constraint "campfire_members_campfire_id_fkey" FOREIGN KEY (campfire_id) REFERENCES campfires(id) ON DELETE CASCADE not valid;

alter table "public"."campfire_members" validate constraint "campfire_members_campfire_id_fkey";

alter table "public"."campfire_members" add constraint "campfire_members_id_key" UNIQUE using index "campfire_members_id_key";

alter table "public"."campfire_members" add constraint "campfire_members_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."campfire_members" validate constraint "campfire_members_user_id_fkey";

alter table "public"."campfire_rules" add constraint "campfire_rules_campfire_id_fkey" FOREIGN KEY (campfire_id) REFERENCES campfires(id) ON DELETE CASCADE not valid;

alter table "public"."campfire_rules" validate constraint "campfire_rules_campfire_id_fkey";

alter table "public"."campfire_rules" add constraint "campfire_rules_description_check" CHECK ((char_length(description) <= 500)) not valid;

alter table "public"."campfire_rules" validate constraint "campfire_rules_description_check";

alter table "public"."campfire_rules" add constraint "campfire_rules_title_check" CHECK (((char_length(title) > 0) AND (char_length(title) <= 100))) not valid;

alter table "public"."campfire_rules" validate constraint "campfire_rules_title_check";

alter table "public"."campfires" add constraint "campfires_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."campfires" validate constraint "campfires_created_by_fkey";

alter table "public"."campfires" add constraint "campfires_slug_key" UNIQUE using index "campfires_slug_key";

alter table "public"."campfires" add constraint "name_length_check" CHECK (((char_length(name) > 2) AND (char_length(name) <= 50))) not valid;

alter table "public"."campfires" validate constraint "name_length_check";

alter table "public"."campfires" add constraint "slug_format_check" CHECK ((slug ~ '^[a-z0-9]+(?:-[a-z0-9]+)*$'::text)) not valid;

alter table "public"."campfires" validate constraint "slug_format_check";

alter table "public"."posts" add constraint "posts_campfire_id_fkey" FOREIGN KEY (campfire_id) REFERENCES campfires(id) ON DELETE SET NULL not valid;

alter table "public"."posts" validate constraint "posts_campfire_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_campfire_creator()
 RETURNS trigger
 LANGUAGE plpgsql
 SET search_path TO ' '
AS $function$
BEGIN
    INSERT INTO public.campfire_members (campfire_id, user_id, role)
    VALUES (NEW.id, NEW.created_by, 'firestarter');
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_campfire_member_count()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
BEGIN
  IF (TG_OP = 'INSERT') THEN
    UPDATE public.campfires
    SET member_count = member_count + 1
    WHERE id = NEW.campfire_id;
    RETURN NEW;
  ELSIF (TG_OP = 'DELETE') THEN
    UPDATE public.campfires
    SET member_count = member_count - 1
    WHERE id = OLD.campfire_id;
    RETURN OLD;
  END IF;
  RETURN NULL;
END;
$function$
;

grant delete on table "public"."campfire_members" to "anon";

grant insert on table "public"."campfire_members" to "anon";

grant references on table "public"."campfire_members" to "anon";

grant select on table "public"."campfire_members" to "anon";

grant trigger on table "public"."campfire_members" to "anon";

grant truncate on table "public"."campfire_members" to "anon";

grant update on table "public"."campfire_members" to "anon";

grant delete on table "public"."campfire_members" to "authenticated";

grant insert on table "public"."campfire_members" to "authenticated";

grant references on table "public"."campfire_members" to "authenticated";

grant select on table "public"."campfire_members" to "authenticated";

grant trigger on table "public"."campfire_members" to "authenticated";

grant truncate on table "public"."campfire_members" to "authenticated";

grant update on table "public"."campfire_members" to "authenticated";

grant delete on table "public"."campfire_members" to "service_role";

grant insert on table "public"."campfire_members" to "service_role";

grant references on table "public"."campfire_members" to "service_role";

grant select on table "public"."campfire_members" to "service_role";

grant trigger on table "public"."campfire_members" to "service_role";

grant truncate on table "public"."campfire_members" to "service_role";

grant update on table "public"."campfire_members" to "service_role";

grant delete on table "public"."campfire_rules" to "anon";

grant insert on table "public"."campfire_rules" to "anon";

grant references on table "public"."campfire_rules" to "anon";

grant select on table "public"."campfire_rules" to "anon";

grant trigger on table "public"."campfire_rules" to "anon";

grant truncate on table "public"."campfire_rules" to "anon";

grant update on table "public"."campfire_rules" to "anon";

grant delete on table "public"."campfire_rules" to "authenticated";

grant insert on table "public"."campfire_rules" to "authenticated";

grant references on table "public"."campfire_rules" to "authenticated";

grant select on table "public"."campfire_rules" to "authenticated";

grant trigger on table "public"."campfire_rules" to "authenticated";

grant truncate on table "public"."campfire_rules" to "authenticated";

grant update on table "public"."campfire_rules" to "authenticated";

grant delete on table "public"."campfire_rules" to "service_role";

grant insert on table "public"."campfire_rules" to "service_role";

grant references on table "public"."campfire_rules" to "service_role";

grant select on table "public"."campfire_rules" to "service_role";

grant trigger on table "public"."campfire_rules" to "service_role";

grant truncate on table "public"."campfire_rules" to "service_role";

grant update on table "public"."campfire_rules" to "service_role";

grant delete on table "public"."campfires" to "anon";

grant insert on table "public"."campfires" to "anon";

grant references on table "public"."campfires" to "anon";

grant select on table "public"."campfires" to "anon";

grant trigger on table "public"."campfires" to "anon";

grant truncate on table "public"."campfires" to "anon";

grant update on table "public"."campfires" to "anon";

grant delete on table "public"."campfires" to "authenticated";

grant insert on table "public"."campfires" to "authenticated";

grant references on table "public"."campfires" to "authenticated";

grant select on table "public"."campfires" to "authenticated";

grant trigger on table "public"."campfires" to "authenticated";

grant truncate on table "public"."campfires" to "authenticated";

grant update on table "public"."campfires" to "authenticated";

grant delete on table "public"."campfires" to "service_role";

grant insert on table "public"."campfires" to "service_role";

grant references on table "public"."campfires" to "service_role";

grant select on table "public"."campfires" to "service_role";

grant trigger on table "public"."campfires" to "service_role";

grant truncate on table "public"."campfires" to "service_role";

grant update on table "public"."campfires" to "service_role";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION rls_helpers.is_campfire_member(p_campfire_id uuid)
 RETURNS boolean
 LANGUAGE sql
 STABLE SECURITY DEFINER
 SET search_path TO ' '
AS $function$
  -- Check for the existence of a membership record
  -- that links the given campfire_id to the current user's profile.
  SELECT EXISTS (
    SELECT 1
    FROM public.campfire_members cm
    WHERE cm.campfire_id = p_campfire_id
      AND cm.user_id = (SELECT id FROM public.profiles WHERE supabase_user = auth.uid())
  );
$function$
;

CREATE OR REPLACE FUNCTION rls_helpers.is_not_anonymous()
 RETURNS boolean
 LANGUAGE sql
 STABLE
 SET search_path TO ' '
AS $function$
  SELECT NOT COALESCE(((auth.jwt() ->> 'is_anonymous'))::boolean, false);
$function$
;

create policy "Allow members to see other members"
on "public"."campfire_members"
as permissive
for select
to authenticated
using (rls_helpers.is_campfire_member(campfire_id));


create policy "Allow non-anonymous users to join campfires"
on "public"."campfire_members"
as permissive
for insert
to authenticated
with check (rls_helpers.is_not_anonymous());


create policy "Allow users to leave campfires"
on "public"."campfire_members"
as permissive
for delete
to authenticated
using ((user_id = ( SELECT profiles.id
   FROM profiles
  WHERE (profiles.supabase_user = auth.uid()))));


create policy "Allow access to auth users"
on "public"."campfire_rules"
as permissive
for insert
to authenticated
with check (true);


create policy "Allow non-anonymous users to create a campfire"
on "public"."campfires"
as permissive
for insert
to authenticated
with check (rls_helpers.is_not_anonymous());


create policy "Allow public and member access to campfires"
on "public"."campfires"
as permissive
for select
to public
using (((visibility = 'public'::campfire_visibility) OR rls_helpers.is_campfire_member(id)));


CREATE TRIGGER on_member_change AFTER INSERT OR DELETE ON public.campfire_members FOR EACH ROW EXECUTE FUNCTION update_campfire_member_count();

CREATE TRIGGER on_campfire_created AFTER INSERT ON public.campfires FOR EACH ROW EXECUTE FUNCTION handle_new_campfire_creator();

CREATE TRIGGER tr_campfires_autoset_created_by BEFORE INSERT ON public.campfires FOR EACH ROW EXECUTE FUNCTION set_created_by_value();






