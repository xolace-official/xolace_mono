create table "public"."health_professionals" (
    "id" uuid not null,
    "field" text not null,
    "bio" text,
    "license_number" text,
    "verified_by_admin" boolean default false,
    "years_of_experience" integer,
    "consultation_link" text,
    "created_at" timestamp with time zone default now(),
    "updated_at" timestamp with time zone default now()
);


alter table "public"."health_professionals" enable row level security;

create table "public"."health_tips_tags" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "health_tips" bigint not null,
    "tags_id" bigint not null
);


alter table "public"."health_tips_tags" enable row level security;

alter table "public"."comments" add column "depth" integer not null default 0;

alter table "public"."comments" add column "parent_id" bigint;

alter table "public"."health_tips" add column "slug" text null;

alter table "public"."health_tips" alter column "title" set not null;

CREATE UNIQUE INDEX health_professionals_pkey ON public.health_professionals USING btree (id);

CREATE UNIQUE INDEX health_tips_slug_key ON public.health_tips USING btree (slug);

CREATE UNIQUE INDEX health_tips_tags_pkey ON public.health_tips_tags USING btree (id);

CREATE UNIQUE INDEX health_tips_title_key ON public.health_tips USING btree (title);

CREATE UNIQUE INDEX unique_tag_tip_pair ON public.health_tips_tags USING btree (tags_id, health_tips);

alter table "public"."health_professionals" add constraint "health_professionals_pkey" PRIMARY KEY using index "health_professionals_pkey";

alter table "public"."health_tips_tags" add constraint "health_tips_tags_pkey" PRIMARY KEY using index "health_tips_tags_pkey";

alter table "public"."comments" add constraint "comments_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES comments(id) ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_parent_id_fkey";

alter table "public"."health_professionals" add constraint "health_professionals_id_fkey" FOREIGN KEY (id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."health_professionals" validate constraint "health_professionals_id_fkey";

alter table "public"."health_tips" add constraint "health_tips_slug_key" UNIQUE using index "health_tips_slug_key";

alter table "public"."health_tips" add constraint "health_tips_title_key" UNIQUE using index "health_tips_title_key";

alter table "public"."health_tips_tags" add constraint "health_tips_tags_health_tips_fkey" FOREIGN KEY (health_tips) REFERENCES health_tips(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."health_tips_tags" validate constraint "health_tips_tags_health_tips_fkey";

alter table "public"."health_tips_tags" add constraint "health_tips_tags_tags_id_fkey" FOREIGN KEY (tags_id) REFERENCES tags(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."health_tips_tags" validate constraint "health_tips_tags_tags_id_fkey";

alter table "public"."health_tips_tags" add constraint "unique_tag_tip_pair" UNIQUE using index "unique_tag_tip_pair";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.insert_health_tip_with_tags(p_title text, p_content text, p_created_by uuid, p_author_name text, p_author_avatar_url text, p_tags text[], p_slug text)
 RETURNS TABLE(id bigint)
 LANGUAGE plpgsql
AS $function$
DECLARE
  v_tip_id bigint;
  v_tag_id bigint;
  tag_name text;
BEGIN
  -- Insert the health tip
  INSERT INTO health_tips (
    title,
    content,
    is_sponsored,
    created_by,
    author_name,
    author_avatar_url,
    is_approved,
    slug
  )
  VALUES (
    p_title,
    p_content,
    FALSE,
    p_created_by,
    p_author_name,
    p_author_avatar_url,
    FALSE,
    p_slug
  )
  RETURNING health_tips.id INTO v_tip_id;

  -- Loop through tags and handle each one
  IF array_length(p_tags, 1) > 0 THEN
    FOREACH tag_name IN ARRAY p_tags LOOP

      -- Insert tag or update usage count
      INSERT INTO tags (name, post)
      VALUES (tag_name, 1)
      ON CONFLICT (name) DO UPDATE
      SET post = tags.post + 1
      RETURNING tags.id INTO v_tag_id;

      -- Link tag to health tip
      INSERT INTO health_tips_tags (tags_id, health_tips)
      VALUES (v_tag_id, v_tip_id)
      ON CONFLICT (tags_id, health_tips) DO NOTHING;

    END LOOP;
  END IF;

  -- Return inserted tip ID
  RETURN QUERY SELECT v_tip_id;
END;
$function$
;

create or replace view "public"."professionals_public_view" as  SELECT hp.id,
    hp.field,
    hp.bio,
    hp.years_of_experience,
    p.username,
    p.avatar_url
   FROM (health_professionals hp
     JOIN profiles p ON ((hp.id = p.id)))
  WHERE (hp.verified_by_admin = true);


CREATE OR REPLACE FUNCTION public.upsert_tags_and_tips_relationship(tag_names text[], tips_id bigint)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  tag_id bigint;
  tag_name text;
BEGIN
  FOREACH tag_name IN ARRAY tag_names LOOP
    -- Upsert tag and get ID (with count increment)
    INSERT INTO tags (name, post)
    VALUES (tag_name, 1)
    ON CONFLICT (name) 
    DO UPDATE SET post = tags.post + 1
    RETURNING id INTO tag_id;

    -- Create relationship with correct column names
    INSERT INTO health_tips_tags (tags_id, health_tips)
    VALUES (tag_id, tips_id)
    ON CONFLICT (tags_id, health_tips) DO NOTHING;
  END LOOP;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.set_created_by_value()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
-- Set a fixed search path
    SET search_path TO public, auth;
  NEW.created_by = ( SELECT id FROM profiles WHERE supabase_user = auth.uid());
  RETURN NEW;
END;$function$
;

grant delete on table "public"."health_professionals" to "anon";

grant insert on table "public"."health_professionals" to "anon";

grant references on table "public"."health_professionals" to "anon";

grant select on table "public"."health_professionals" to "anon";

grant trigger on table "public"."health_professionals" to "anon";

grant truncate on table "public"."health_professionals" to "anon";

grant update on table "public"."health_professionals" to "anon";

grant delete on table "public"."health_professionals" to "authenticated";

grant insert on table "public"."health_professionals" to "authenticated";

grant references on table "public"."health_professionals" to "authenticated";

grant select on table "public"."health_professionals" to "authenticated";

grant trigger on table "public"."health_professionals" to "authenticated";

grant truncate on table "public"."health_professionals" to "authenticated";

grant update on table "public"."health_professionals" to "authenticated";

grant delete on table "public"."health_professionals" to "service_role";

grant insert on table "public"."health_professionals" to "service_role";

grant references on table "public"."health_professionals" to "service_role";

grant select on table "public"."health_professionals" to "service_role";

grant trigger on table "public"."health_professionals" to "service_role";

grant truncate on table "public"."health_professionals" to "service_role";

grant update on table "public"."health_professionals" to "service_role";

grant delete on table "public"."health_tips_tags" to "anon";

grant insert on table "public"."health_tips_tags" to "anon";

grant references on table "public"."health_tips_tags" to "anon";

grant select on table "public"."health_tips_tags" to "anon";

grant trigger on table "public"."health_tips_tags" to "anon";

grant truncate on table "public"."health_tips_tags" to "anon";

grant update on table "public"."health_tips_tags" to "anon";

grant delete on table "public"."health_tips_tags" to "authenticated";

grant insert on table "public"."health_tips_tags" to "authenticated";

grant references on table "public"."health_tips_tags" to "authenticated";

grant select on table "public"."health_tips_tags" to "authenticated";

grant trigger on table "public"."health_tips_tags" to "authenticated";

grant truncate on table "public"."health_tips_tags" to "authenticated";

grant update on table "public"."health_tips_tags" to "authenticated";

grant delete on table "public"."health_tips_tags" to "service_role";

grant insert on table "public"."health_tips_tags" to "service_role";

grant references on table "public"."health_tips_tags" to "service_role";

grant select on table "public"."health_tips_tags" to "service_role";

grant trigger on table "public"."health_tips_tags" to "service_role";

grant truncate on table "public"."health_tips_tags" to "service_role";

grant update on table "public"."health_tips_tags" to "service_role";


create policy "Enable read access for all users"
on "public"."health_professionals"
as permissive
for select
to authenticated
using ((verified_by_admin = true));


create policy "Professional can update own health profile"
on "public"."health_professionals"
as permissive
for update
to public
using ((auth.uid() = ( SELECT profiles.supabase_user
   FROM profiles
  WHERE (profiles.id = health_professionals.id))));


create policy "Enable insert for authenticated users only"
on "public"."health_tips"
as permissive
for insert
to authenticated
with check ((EXISTS ( SELECT 1
   FROM profiles
  WHERE ((profiles.supabase_user = auth.uid()) AND (profiles.role = 'help_professional'::user_role)))));


create policy "Enable insert for authenticated users only"
on "public"."health_tips_tags"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."health_tips_tags"
as permissive
for select
to authenticated
using (true);




